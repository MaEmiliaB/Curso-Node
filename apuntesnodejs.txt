Qué es node?
    Node.js es un entorno de tiempo de ejecución de JavaScript que permite ejecutar código JavaScript en el servidor.
    A diferencia de JavaScript en el navegador, que se ejecuta en el cliente, Node.js permite ejecutar JavaScript en el servidor,
    lo que lo hace ideal para desarrollar aplicaciones de lado del servidor. 
        (Chat GPT)

Comandos útiles en VSCode
    ctl + k seguido de ctl + C -> Transoforma a comentario el código seleccionado
    ctl + k seguido de ctl + U -> Descomenta el código
    // comentario en una línea
    /* abrir comentario de varias líneas
    */ cerrar comentario en varias líneas

    Para ejecutar en la terminal, es necesario escribir "node nombre_del_archivo.js" para correr el código.

Variables
    Son elementos fundamentales para almacenar y manipular datos en un programa.
    Es un contenedor que es un guardamemoria, un nombre, un tipo de dato y un valor que es un dato asignado.
    El nombre es una etiqueta que se usa par aidentificarla y hace referencia a ella en el código.
    El tipo de dato indica que tipo de información se almacena en esa variable.
    El valor asignado es el dato que se almacena en esa variable.

    Las variables se utilizan para guardar datos que pueden variar durante la ejecución del programa.

    Cuando programamos podemos hacer varias acciones sobre las variables.
    Declararlas: significa que se asigna nombre y tipo de dato a la variable.
    Asignar valor a la variable luego de declararla (almacena dato específico en la variable)
    Leer el valor de variable. Se puede acceder al valor de la variable y leerlo en el código.
    Modificar los valores de una variable dependeiendo de las operaciones.

    En JS las variables se declaran utilizando la palabra reservada "let" seguido del nombre de la variable.

    Mutablidad: Capacidad de cambiar su estado o contenido después de su creación. Una variable puede cabiar su contenido o valor 
    siempre y cuando sea mutable.

    en JS let y const son palabras reservadas para declarar variables. 
    Let nos va a permitir reasignar valores a la variable después de su declaración original.
    Const no permite reasignacion de valores. (Son contantes, no variables)

    Let y const también se diferencian en la manera que se inicializan, se puede definir una variable con let sind arle valor y 
    darselo más adelante en el programa. Cosnt en cambio, necesita si o si una asignacion de valor para ser declarada.

    Para definir variables, una buena práctica es definir que todas son constantes hasta que se demuestre lo contrario.

    Tipos de variables: JS los infiere desde la variable.

Datos primitivos en JS:
    Son tipos de datos basicos y fundamentales en el lenguaje de programación que se utiliza para rempresentar 
    valores simples. Son los más básicos y elementales en cualquier lenguaje de programación y se utilizan para cosntruir 
    objetos y estructuras de datos mas complejas y para diseñar algoritmos.
    String: Secuencia de caracteres, se definnen entre comillas 
    Number: represneta un número (entero o decimal)
        Definir numero:
            const intNum = 5
            const floatNum = 3.14
            const negative = -3
            Se pueden realizar operaciones aritméticas con sintáxis igual a las de las calculadoras.
            Para el modulo se usa % (para el resto)
            incremento variable ++ (se incrementa en 1) 
            decremento variable -- (se reduce en 1)
    
    Boolean: Representan un valor de verdadero o falso.
    Null: valor nulo, objeto que no existe o sin valor.
    Undefined: variable sin valor asignado.


    Prototipo: porpiedades que los hacen únicos y métodos que se pueden utilizar para realizar acciones sobre ellos.

Metodo
    es una función que pertenece a un objeto y se define dentro de la definición de clase o prototipo del objeto.
    Tienen acceso a los datos del objeto y pueden modificarlos o utilizarlos para realizar operaciones. 

    Método toString: Convierte el número en una cadena de caracteres.
        const numNro = "3.1415"
        const num = toString(numNro)
    Método parseFloat: COnvierte una cadena de caracteres a número decimal.
        const numStr= "3.1415"
        const num = parseFloat(numStr)
    Método parseInt: Convierte una cadena de caracteres en un nro entero, redondea los float.    
        const numStr = "3.1415"
        const num = parseInt(numStr) (La salida es 3)
    Método legth: Devuelve la longitud de una cadena de texto
        const texto = "Hola"
        let longitud = texto.legth (La salida es 4)
    Método charAr: Devuelve el caracter en una posición específica dentro de un string.
        const texto = "Hola Mundo"
        console.log(texto.charAr(0)) (La salida es H) 
    Método toUpperCase: Devuelve el texto convertido en mayúscula.
        const texto = "Hola Mundo"
        console.log(texto.toUpperCase()) (La salida es HOLA MUNDO)
    Metodo replace: Nos devuelve una cadena de texto dónde se reemplazan las ocurrencias de una subcadena.
        const texto = "Hola Mundo"
        console.log(texto.replace("Mundo", "Juan")) (La salida es Hola Juan)                   

Booleanos
    Son un tipo de dato que pueden tener solo dos valores, gralmente se usan para obtener el resultado de una comparación objeto
    condición. 
    Se pueden declarar como cualquier otra variable en el código, aunque no es común que sea definido por el programador si no que
    se obtenga como el resultado de una operacion. Se utulizan con los operadores de comparación.
        ej:
            let myBoolean = true

Operadores de comparación
    Igual (==): comprueba si dos valores son iguales
    No igual(!=): comprueba si dos valores son distintos
    Igual estricto (===): comprueba si dos valores son iguales y del mismo tipo
    No igual estricto(!==): comprueba si dos valores son distintos o de distinto tipo
    Mayor que (>): comprueba si un valor es mayor que otro
    Menor que (<): comprueba si un valor es menor que otro
    Mayor o igual que (>=): comprueba si un valor es mayor o igual que otro
    Menor o igual que (<=): comprueba si un valor es menor o igual que otro
        ej: 
            let a = 10;
            let b = "10";
 
            console.log(a==b) //False porque son de distinto tipo   

Operadores lógicos
    AND && : Devuelve verdadero si ambas condiciones son verdaderas
    OR || : Devuelve verdadero si al menos una de las condiciones es verdadera
    NOT ! : Invierte el resultado del booleano
        ej:
            let a = true;
            let b = false; 
        
            console.log(a && b) //False
            console.log(a || b) // True
            console.log(a) // False
        
Estructuras de control
    Es un bloque de código que permite manipular el flujo de ejecución del programa.
    Son fundamentales en cualquier lenguaje de programación ya que permite realizar tareas como tomar desiciones, repetir
    accioones y realizar cálculos basados en condiciones específicas.

        if: Nos permite ejecutar bloques de control si una condicion es verdadera
        elseif: Nos permite evaluar múltiples condiciones de manera secuencial
        else: Si la condición anterior es falsa, se utiliza esta estructura para ejecutar otro bloque de código

        if(condición1){
            //Código a ejecutar si la condición es verdadera.
        }elseif(condición2){ 
            //Código a ejecucutar si la condición1 es falsa pero la condición2 es verdadera.
        } else(condición3){
            //Código a ejecutar si la condición1 y la condición2 son falsas pero la condicion3 es verdadera.
        }

Funciones y ámbitos 
     Bloques de código reutilizables que realizan una tarea específica, permitiendo dividir el programa en pequeñas partes y manejables.
     Cada función es delimitada por sus llaves y dentro de ellas podemos escribir cualquier código mientras sea válido, incluso otras
     funciones.
        Ej:     function saludo() {
            console.log("Hola!");
        }
    Todo lo que se encuentra entre llaves será parte del scope de esa función. El scope o ámbito se refiere al contexto en el que 
    las variables y las funciones están definidas y son accesibles en un programa, determina la visibilidad y la duración de las 
    variables en el código.  
    En JS hay 3 ámbitos el global, el local y el de bloque:

    Ámbito global:
        Es el contexto de nivel superior, las variables y funciones definidas en este son accesibles desde cualquier parte del programa,
        incluso funciones anidadas. Es importante tener cuidado al usar variables globales ya que pueden causar conflictos y difucultar
        encontrar bugs.
    Ámbito local: 
        Se genera cuando se declara una función. Las variables y funciones definidas en una función son accesiblesd entro de esa funcion
        y no son visibles fuera de ella. Cada vez que se crea una función, se crea un nuevo ámbito local para esa funcón y s edestruye 
        cuando la función finaliza su ejecución. Utilizarlas ayuda a evitar conflictos, facilita la organización del código y facilita 
        ebcontrar errores.
            ej: scope global -> let a = 5 (Se mantiene)
                scope local o de función -> let a = 10 (esta es una nueva variable)
                                            console log(a) // 10  
                                            Si intento usar esta variable en el ámbito global, arroja 5   
    Ámbito por bloque:
        Es un contexto creado dentro de un bloque de código delimitado con llaves, como puede ser el cuerpo de una función, un bucle o 
        una declaración if. Incluso si ese bloque está dentro de una función o de otro bloque, las variables declaradas en su interior
        serán solo accesibles debtro de ese bloque.
            ej: console.log(a) //10
                let z = 23      
                console.log(z) //23 
                Si intento usar z en el ámbito global, dirá que no está definida.

    Las variables declaradas con let y cons tienen ámbito de bloque, son accesibles dentro del bloque en el que se declaran.
    Var no tiene esta limitación y es accesible en todo el código dónde se declaara, Eto nos puede llevar a sobreescribir información
    de manera no intencional. Por eso var, no se considera una alternativa segura para definir variables.

    Cómo puedo usar una función? Debo llamarl o invocarla escribiendo su nombre seguida de paréntesis.
        ej: saludo() // Hola!
        
        Parámetros:Son variables que se definen dentro de los paréntesis de la función y permiten que la función acepte datos externos. 
        ej:     function suma(a,b){
            console.log(a+b)
        }  // a y b son parámetros de la función y pueden representar cualquier cosa, como una plantilla de posibles valores que la 
            función puede recibir.

            ejecución: suma(3,5) // el resultado será 8
                
    Palabra return: Sirve para utilizar el resultado de una función en el resto de nuestro código. Con esta palabra podemos almacenar
    el resultado en una variable y utilizarlo al llamar esa función.
        ej: function suma(a,b){
            return a+b 
        }

        const resultado = suma(3,5)
        console.log(resultado)

    Las funciones también se pueden declarar como una expresión, es decir, asignando una funcion a una variable directamente.
    Ene ste caso, nuestra función es una función anónima, es decir que no tinee un nombre específico. Se definen utilizando la
    palabra clave function seguida de parentesis y llaves pero sin especificar un nombre. Est o permite guardar nuestra función
    dentro de una variable y pasarla como argumento a otra función. 
        ej: const saludo = function() {
            console.log("Hola!");
        }     

        para ejecutarla: saludo() // Mostrará Hola!

    Arrow function o funciones flecha: Son la forma más concisa de definir funciones usando la sintáxis = o > en lugar de la palabra
    clave function. Son funciones que no tienen prototipo, lo que significa que su comportamiento será diferente a las otras 
    funciones en algunos casos.
        ej: const suma = (a,b)=>{
            return a+b;
        }

        console.log(suma(3, 5)) //El resultado será 8

Estructuras de datos
    Es una forma organizada de almacenar y administrar datos en un programa.
    Nos ayudan y facilitan el acceso y modificación de datos según las necesidades de nuestros algorítmos.

    Arrays
        Listas ordenadas de elementos que pueden almacenar diferentes tipos de datos e incluso pueden tener otras esturucturas de datos.
        Los arrays, al igual que otras variables, se declaran y se inicializan, se hace con let más el nombre del arreglo igual y entre
        corchetes se declaran los elementos. El primer elemento se encuentra en la posición cero.
        ej:     let frutas=["manzana", "banana", "pera"];
                console.log(frutas) //se imprime la lista completa
                console.log(frutas[0]) //se imprime el elemento 0, en este caso manzana

                frutas[3] = "ciruela"
                console.log(frutas) //imprime la lista, pero modifica pera por ciruela
        Los arrays tienen sus propios prototipos, es decir es una plantilla con propiedades y métodos que son comunes a cualquier elemento
        de ese tipo. 
            Método length: 
                console.log(frutas.length)//Nos da la longitud de los elementos del array, 3.  
            Método push:
                frutas.push["Naranja"]//Agrega al funal del array un elemento
            Método pop:
                frutas.pop()//Remueve el último elemento del arreglo
            Método shift:
                frutas.shifr("Naranja")//Agrega un elemento al principio del array
            Método unshift:
                frutas.unshift() //Elimina el elemento cero
            Método forEach:
                frutas.forEach(fruta=> console.log(fruta));//Permite recorrer uno por uno los elementos del arreglo                        
            Método map:
                const mensaje= frutas.map(fruta=>{
                    return "Me gusta comer " + fruta
                })
                console.log(mesaje)// retorna un nuevo array con elementos que dice "ME gusta comer + nombre de la fruta"
            Método splice:
                frutas.plice(2,0, "Limon", "Kiwi"); 
                console.log(frutas)    //Agrega limon y kiwi en la posición 2 que es lo que le indicamos en la posición cero, pero 
                                        no remueve ningún elemento porque el segundo está en cero. 
                frutas.splice(2,1, "Limon", "Kiwi"); 
                console.log(frutas)//Agrega limon y kiwi que es lo que le indicamos en la posición cero, remueve el original
                                    de la posición 2.

        -> Los arrays se pasan por referencia y no por valor, significa que cuando pasas un array a una función o asignas un
        array como valor de otro, estamos pasando una referencia al objeto array en la memoria en lugar de una copia del mismo;
        por lo que si una funciónc ambia el valor de un elemento del array dentro de su alcance, el cambio se va a reflejar en
        todas las referencias del mismo array.
            ej: let array1 = [1,2,3];
                let array2 = array1;    //cualquier cambio en array1 va a afectar a array2

                array2[0]=4;
                console.log(array1)

        Cuando se quiera evitar esta situación, para crear una copia de un array en lugar de una referencia a la misma memoria,
        se puede usar el método slice o el operador spread, que son tres puntos (spread operator).
            ej:  let array1 = [1,2,3];
                let array2= array1.slice(); //array2 se crea como una copia del contenido de array1

Bucles
    For: es uno de los más comunes en todos los lenguajes. En este bucle tenemos control en el iterador y en la sentencia final.
        Se usa en casos dónde sabemos hasta dónde tenemos que iterar.
        Sintáxis:
            for(inicialización de un iterador,; condición a cumplir; incremento del iterador){
                código a ejecutar
            }
        Ciclo:
            - Se inicializa el contador
            - Se verifica la condición
            - Se ejecuta el código
            - Se realiza una acción sobre el contador

        Ej: queremos contar los numeros del 1 al 5.
            for (let i = 1; i <=5;i++){
                console.log(i)
            }    

    While: Ejecuta un bloque de código siempre que se cumpla una condición. Se utiliza en situaciones dónde no se tiene control en la variable final.
        Sintáxis: 
            while(condicion){
                //Cuerpo de la función 
            }
        Ej:     let i=2 //Fuera del while
                while(i<=5){
                    console.log(i)
                    i++//esto modifica una variable
                }    
    Do Wile: La condición se evalúa despúes de la primera ejecución del código.
        Sintáxis:
        do {
            //código a ejecutar
        } while(condicion)
        Ej: let i =1 //Fuera del bloque
            do {
                console.log(i)
                i++
            } while(i<=5)
    forEach:
        Es específico para trabajar con arrays, nos permite ejecutar una función para cada elemento de un array.
        Sintáxis: 
            Ej: const numeros= [1,2,3,4,5]
            numeros.forEach(numero=>{
                consol.elog(numero)
            })        
    For Of:
        Permite iterar sobre elementos de estructuras iterables como arrays o strings.
        ej:
            const texto= "NodeJS"
            for(letra of texto){
                console.log(letra)
            } // Devuelve un console.log de cada lertra del string

    ej de aplicación
        function clasificaNumeros(numeros){
            const pares= [];
            const impares= [];
                for (const numero of numeros){
                    if (numero % 2 ===0){
                        pares.push(numero);
                    }else{
                        impares.push(numero);}
                    }
                console.log("Numeros pares: " , pares);
                console.log("Numeros impares: ", impares);
        }

        const numeros =[1,2,3,4,5,6,7,8,9];
        clasificaNumeros(numeros)

Objetos
    Qué son?: Son como contenedores que guardan datos y funciones relacionadas en el formato clave-valor.
    A los datos se les llama propiedades y a las funciones métodos.
        ej: const miGato = {
            nombre: "Mia",
            edad:2, //Clave: edad, Valor: 3
            color: "Blanco"
            maullar: function(){
                console.log("Miau!")
            }
            }

    Se puede sacceder a las propuedades de un objeto, utilizando el nombre del objeto segiuodo por un punto y el nombre de la propiedad.
        ej: console.log("El nombre de mi gato es: " + miGato.nombre)
            console.log( y tiene" + miGato.edad + " años.")
    También se pueden modificar las propiedades cómo si fueran variables.
        ej: miGato.edad=10

    Los métodos de los objetos son simples funciones que están asociadas al objeto por contexto, si queremos llamar al método de un
    objeto, utlizamos el nombre del objeto seguido por un punto y el nombre del método que queremos utilizar seguido por paréntesis
    como si llamaramos a una funcion normal.
        ej: miGato.maullar()

    La estructura de los objetos es igual a la de los prototipos, dónde cada tipo tiene sus propiedades y métodos que podemos acceder.
    Los objetos nos permiten estructurar datos y generaar nuestros propios templates para guardar info de forma ordenada e incluso para
    realizar operaciones con estos datos. Nos permiten generar nuestros propios prototipos.

    Prototipos y herencia.
        Cómo funcionan los prototipos de objetos?: Cada objeto tiene un prototipo que es otro objeto. Todas las propiedades y métodos
        del prototipo están disponibles para el objeto original.

        ej: miNuevoGato = Object.create(miGato) //nuevo objeto llamado miNuevoGato que hereda de miGato, significa que tiene acceso a
                                                todas las propiedades y métodos de miGato.
            miNuevoGato.maullar()                                    

        Al imprimir miNuevoGato aparece como un objeto vacío, aunque tiene acceso a todas las propuedades de su prototipo original,
        pero no son parte de su declaración.
        La herencia de prototipos nos permite compartir funcionalidades de nuestro código sin tener necesidad de volver a escribirlo.

    Métodos de objet.
        Objet.keys: devuelve un array que contiene las claves de nuestro objeto. 

            ej: let keys = Objet.keys(miGato)
                console.log(keys)
        Nos puede servir para iterar el obejeto utilizando un bucle for.        
            ej: for (let i=0; i <keys.length; i++){
                console.log(`La clave es " ${keys[i]} " y el valor es "${miGato[keys[i]]}"`) 
            }
        hasOwnPeoperty: Permite verificar si un objeto tiene una propiedad específica como su propiedad propia, no heredada.
            ej: console.log(miGato.hasOwnProperty('nombre'))
                console.log(miGato.hasOwnProperty('maullar'))
                console.log(miNuevoGato.hasOwnProperty('maullar'))

        Object.getOwnPropertyNames: devuelve un array con todas las propiedades propias del objeto, incluso las que no son enumerables.
            ej: console.log(Object.getOwnPropertyNames(miGato))

Creando nuestros módulos
    Cada archivo independiente es un módulo y cada archivo se puede llamar desde otro archivo para utilizar el código que tiene
    escrito adentro. Creamos dos archivos js, app.js y greet.js.
    ej: módulo que exporta una función para saludar a un usuario.
        Para lograrlo vamos a crear un módulo greet y lo vamos a utiñizar dentro del archivo app.js.
        Para poder usar un módulo es necesario indicarle a node.js explícitamente que se quiere compartir, por eso vamos a definir
        nuestra función y exportarla dentro del objeto de node module en su propiedad exports module (que es un objeto que se encuentra
        disponible en el runtime de node y nos permite exponer todo lo que queremos exportar con el resto de nuestro código).
        En archivo greet.js:

                function greet(name) {
                    return `¡Hola ${name}!`
                };

                module.exports = { greet }

        Para usar este modulo en nuestro archivho app tenemos que indicar que lo necesitamos, para eso vamos a requerir nuestro archivo,
        declarando una variable que puede tener cualquier nombre y le asignamos un valor utilizando la palabra reservada require y entre
        paréntesis la ruta del módulo que queremos usar. Luego para ejecutar hacemos un console.log.
            En archivo app.js:
                const greet = require('./greet')
                console.log(greet.greet("mundo"))

        Un módulo puede tener más de un export. Podemos crear un nuevo greet que diga "Bye!" por ejemplo.   
                function bye(name) {
                    return `¡Bye ${name}!`
                }
                module.exports = { greet, bye }         
    
    Código modular: Significa que cada parte de nuestro código tiwnw su propia responsabilidad separada, lo que hace que el códugo esté
    más organizado, sea más manejable y mucho más fácil de entender.

Módulos nativos:
    Son herramientas que vienen integradas para no repetir código, permiten realizar diferentes operaciones.
    Por ejemplo:
        Módulo fs: Puede servir para operaciones con sistema de archivos.
        Módulo http: Sirve para crear servidores http.

NPM - Node Package Manager:
    Es dónde podemos encontrar código de terceros para utilizar. Viene instalado con el seetup inicial node.js.
    El código puede contenerse en módulos, librerías o framework.
    NPM tiene una página (npmjs.com) con un buscador para explorar módulos y tiene info útil sobre quién desarrollo el código,
    que problema resuelve y cómo utilizarlo.

    Usando NPM:
    - Inicializamos proyecto con un paquete NPM. (En app.js) abriendo la terminal tipeando npm init, para saltar los pasos, dar enter.
    - Se crea una rchivo nuevo {}packaje.json que contiene toda la info de nuestro proyecto y se puede modificar de ser necesario.
    - En la terminal tipear npm install cat-me(que es la instrucción que nos dio la pág npm para instalar el paquete que queremos usar).
    - Se crea una nueva propuedad en package.json que se llama dependencies, ahí estan indicatos todos los modulos que instalemos a partir
    de ahora. También va a haber una carpeta que se llama Node modulos, dónde se van a guardar todas las dependencias para que nuestros
    módulos puedan funcionar correctamente.
    - Escribimos el código dónde requerimos el módulo:
        consta catMe= require ('cat-me')
        console.log(catMe())

        